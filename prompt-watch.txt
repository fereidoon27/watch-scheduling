! Important alert: This text will appear in red
? Question: This text will appear in blue
* Note: This text will appear in green
// Deprecated: This text will have strikethrough in gray
TODO: Remember to finish this task (appears in orange)
Custom tags (if you've added them):
NOTE This is an important note
FIXME This needs to be fixed soon
BUG Known issue here
IDEA What if we tried this approach?
DONE This task is complete
>> Additional information here



Data Flow:
map.name (name-to-phone mapping)
↓ (read by)
generate-scheduling.py (schedule generator)
↓ (creates)
schedule.json (time-to-phone mapping)
↓ (read by)
phone-reader.py (runtime service)
↓ (updates)
phone.txt (active phone number)

! prompt 1
and this is the schedule.json that created by generate-scheduling.py . 
this schedule based on not fair logic ! 
for example in this schedule `mlotfi` i always in day and `behrouz` is always in night !
so in addittion that times be even , the day and night must be even too. 

! prompt 2
consider in your code that in the map.name file , the members is not necessary four people, it can be variable. so the logic of code must consider that and fetch names and numbers from map.name . 

! prompt 3
Okay. Now see if it's possible that the distance between two consecutive shifts is equally and better for everyone? first explain your new approach and logic, and if i conform that, then rewrite the related generate-scheduling.py code .

! prompt 4
Describe the aesthetic and visual drawbacks of the following output.

! prompt 5
Okay, great!
Now, I’d like to add real dates to both the output and the .json file.
The program should ask the user to input a start date for the initial planning (default to the current date if no input is given).
The scheduling should then be generated for the next full month starting from that date

! prompt 6
**Concise Drawbacks of cli output:**
1. Dates use unnecessary three digits (e.g., `Mar 018` instead of `Mar 18`).
4. No consistent alignment between related column. for example in bellow output:
```
Mar 18 (Tuesday) [Day:   alifatahi]  |  [Night: behrouz  ]
Mar 19 (Wednesday) [Day:   mlotfi   ]  |  [Night: amin     ]
Mar 20 (Thursday) [Day:   behrouz  ]  |  [Night: alifatahi]
Mar 21 (Friday) [Day:   amin     ]  |  [Night: mlotfi   ]
```
`[Day` should be aligned in a column below each other.
`‍‍[Night` should be aligned in a column below each other.
`(day` should be aligned in a column below each other.


! prompt 7
ok. good.
why the new file date_info.txtsaved? remove it if unnecessary or you can use another approach.
and 
i want to save the cli output in approptiate file . based on your choise (the file have to be show in mobile very good and colorfull)


! prompt 8
ok. the logic of scheduling is not fair.
for example this is the out put of scheduling of one month :

```
SHIFT SUMMARY
=============
alifatahi:  7 day shifts, 12 night shifts (Total: 19)
behrouz  :  12 day shifts, 7 night shifts (Total: 19)
mlotfi   :  13 day shifts, 12 night shifts (Total: 25)
amin     :  12 day shifts, 13 night shifts (Total: 25)

```

**Drawbacks (Fairness of Scheduling):**
1. **Unequal Shift Distribution:**
   * `mlotfi` and `amin` have 25 total shifts, while `alifatahi` and `behrouz` only have 19. This creates an imbalance in workload distribution.
2. **Day vs. Night Shift Imbalance:**
   * While the day and night shifts are somewhat balanced for `alifatahi` and `behrouz`, they are highly imbalanced for `mlotfi` and `amin`, with one working significantly more day shifts or night shifts.
3. **Overwork Risk:**
   * `mlotfi` and `amin` are assigned significantly more shifts overall, which could lead to overwork and potential burnout.
**Concise Solution:**
1. **Redistribute Shifts:**
   * Aim for an even split of total shifts (e.g., 21 shifts per person) across all individuals.
2. **Balance Day/Night Shifts:**
   * Ensure each person has a similar balance between day and night shifts to prevent fatigue.



Proposed Fair Scheduling Approach
I propose a simple but effective solution:

For day shifts: Rotate through all team members sequentially
For night shifts: Also rotate through all team members, but start from a different position in the list (offset)

This approach ensures:

Everyone gets approximately the same number of total shifts
Everyone gets a mix of both day and night shifts
The solution works with any number of team members
The scheduling logic remains simple and maintainable



! prompt 9
The generated schedule should be for the next 30 days. The schedule will be set for the next thirty days from the date entered by the user.
for example if user enter `2025-03-01`the schedule must set until 2025-04-01 . (or if he enter 2025-03-15 the schedule must set until 2025-04-15 )
alsow i want the panual part remove completly. 

! prompt 10
now based on the schedule.json that createsd by generate-scheduling.py

! prompt 11
all file address must be relative not absoulute (based on where script is run.) the format of input file has changed as bellow :  

{
    "2025-03-18": {
        "weekday": "tue",
        "day": {
            "name": "mlotfi",
            "phone": "09331835483"
        },
        "night": {
            "name": "amin",
            "phone": "09361325328"
        }
    },
    "2025-03-19": {
        "weekday": "wed",
        "day": {
            "name": "behrouz",
            "phone": "09357797511"
        },
        "night": {
            "name": "alifatahi",
            "phone": "09365663103"
        }
    },
    "2025-03-20": {
        "weekday": "thu",
        "day": {
            "name": "amin",
            "phone": "09361325328"
        },
        "night": {
            "name": "mlotfi",
            "phone": "09331835483"
        }
    },
    "2025-03-21": {
        "weekday": "fri",
        "day": {
            "name": "alifatahi",
            "phone": "09365663103"
        },
        "night": {
            "name": "behrouz",
            "phone": "09357797511"
        }
    },
    "2025-03-22": {
        "weekday": "sat",
        "day": {
            "name": "mlotfi",
            "phone": "09331835483"
        },
        "night": {
            "name": "amin",
            "phone": "09361325328"
        }
    },
    "2025-03-23": {
        "weekday": "sun",
        "day": {
            "name": "behrouz",
            "phone": "09357797511"
        },
        "night": {
            "name": "alifatahi",
            "phone": "09365663103"
        }
    }
}


so rewrite it based on this new structure . 
the output in phone.txt must select based on current time . i mean if current time is 2025-03-23 and 9:00 AM it related to `2025-03-23` and `day` and `behrouz` in .json file and related phone number is `09357797511` . so 09357797511 must write in phone.txt  . 


! prompt 11
now based on the schedule.json structure i want to write new python script that : 
manually change the schedule based on user prompt. 
i mean when the script runs , all the user name must  fetch from schedule.json and show in the menu. for example the menu for this scenario is : 

1- mlotfi
2- behrouz
3- amin
4- alifatahi

and when user select one of them for example amin with enter number `3`, all related scheduling to `amin`must show to user in new menu. and user can select multi of them by entering related number . for example in this scenario : 

Amin's Schedule
1- 2025-03-18 (Tuesday): Night Shift
2- 2025-03-20 (Thursday): Day Shift
3- 2025-03-22 (Saturday): Night Shift

user can chose multi option for example`1,3` . 
and when he select, the script must ask about alternative name that user want to sustitude with `amin` in these shift. with showing all user ecept amin in a new menu as list . for example 

1- mlotfi
2- behrouz
3- alifatahi

and user coshed `1` (mlotfi).

so the schedule.json must edit based on these input. i mean substitude the `mlotfi` with `amin` in the Shifts that user coshed (`1,3`) and edit related phone number in that file . 
so first explain what you found out from my word and then when i confirm write the related python script. 


